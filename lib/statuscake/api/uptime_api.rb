# frozen_string_literal: true

# StatusCake API
#
# Copyright (c) 2022
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# API version: 1.0.0
# Contact: support@statuscake.com
#
# Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

require 'cgi'

module StatusCake
  # :nodoc
  class UptimeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an uptime check
    # Creates an uptime check with the given parameters.
    # @param name [String] Name of the check
    # @param test_type [UptimeTestType]
    # @param website_url [String] URL or IP address of the server under test
    # @param check_rate [UptimeTestCheckRate]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :basic_username Basic authentication username
    # @option opts [String] :basic_password Basic authentication password
    # @option opts [Integer] :confirmation Number of confirmation servers to confirm downtime before an alert is triggered (default to 2)
    # @option opts [Array<String>] :contact_groups List of contact group IDs
    # @option opts [String] :custom_header JSON object. Represents headers to be sent when making requests
    # @option opts [Boolean] :do_not_find Whether to consider the check as down if the content is present within the response (default to false)
    # @option opts [Array<String>] :dns_ips List of IP addresses to compare against returned DNS records
    # @option opts [String] :dns_server FQDN or IP address of the nameserver to query
    # @option opts [Boolean] :enable_ssl_alert Whether to send an alert if the SSL certificate is soon to expire (default to false)
    # @option opts [String] :final_endpoint Specify where the redirect chain should end
    # @option opts [String] :find_string String to look for within the response. Considered down if not found
    # @option opts [Boolean] :follow_redirects Whether to follow redirects when testing. Disabled by default (default to false)
    # @option opts [String] :host Name of the hosting provider
    # @option opts [Boolean] :include_header Include header content in string match search (default to false)
    # @option opts [Boolean] :paused Whether the check should be run (default to false)
    # @option opts [Integer] :port Destination port for TCP checks
    # @option opts [String] :_post_body JSON object. Payload submitted with the request. Setting this updates the check to use the HTTP POST verb
    # @option opts [String] :post_raw Raw HTTP POST string to send to the server
    # @option opts [Array<String>] :regions List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET /v1/uptime-locations` endpoint.
    # @option opts [String] :status_codes_csv Comma separated list of status codes that trigger an alert
    # @option opts [Array<String>] :tags List of tags
    # @option opts [Integer] :timeout The number of seconds to wait to receive the first byte (default to 15)
    # @option opts [Integer] :trigger_rate The number of minutes to wait before sending an alert (default to 0)
    # @option opts [Boolean] :use_jar Whether to enable cookie storage (default to false)
    # @option opts [String] :user_agent Custom user agent string set when testing
    # @return [APIResponse]
    def create_uptime_test(name, test_type, website_url, check_rate, opts = {})
      data, _status_code, _headers = create_uptime_test_with_http_info(name, test_type, website_url, check_rate, opts)
      data
    end

    # Create an uptime check
    # Creates an uptime check with the given parameters.
    # @param name [String] Name of the check
    # @param test_type [UptimeTestType]
    # @param website_url [String] URL or IP address of the server under test
    # @param check_rate [UptimeTestCheckRate]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :basic_username Basic authentication username
    # @option opts [String] :basic_password Basic authentication password
    # @option opts [Integer] :confirmation Number of confirmation servers to confirm downtime before an alert is triggered (default to 2)
    # @option opts [Array<String>] :contact_groups List of contact group IDs
    # @option opts [String] :custom_header JSON object. Represents headers to be sent when making requests
    # @option opts [Boolean] :do_not_find Whether to consider the check as down if the content is present within the response (default to false)
    # @option opts [Array<String>] :dns_ips List of IP addresses to compare against returned DNS records
    # @option opts [String] :dns_server FQDN or IP address of the nameserver to query
    # @option opts [Boolean] :enable_ssl_alert Whether to send an alert if the SSL certificate is soon to expire (default to false)
    # @option opts [String] :final_endpoint Specify where the redirect chain should end
    # @option opts [String] :find_string String to look for within the response. Considered down if not found
    # @option opts [Boolean] :follow_redirects Whether to follow redirects when testing. Disabled by default (default to false)
    # @option opts [String] :host Name of the hosting provider
    # @option opts [Boolean] :include_header Include header content in string match search (default to false)
    # @option opts [Boolean] :paused Whether the check should be run (default to false)
    # @option opts [Integer] :port Destination port for TCP checks
    # @option opts [String] :_post_body JSON object. Payload submitted with the request. Setting this updates the check to use the HTTP POST verb
    # @option opts [String] :post_raw Raw HTTP POST string to send to the server
    # @option opts [Array<String>] :regions List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET /v1/uptime-locations` endpoint.
    # @option opts [String] :status_codes_csv Comma separated list of status codes that trigger an alert
    # @option opts [Array<String>] :tags List of tags
    # @option opts [Integer] :timeout The number of seconds to wait to receive the first byte (default to 15)
    # @option opts [Integer] :trigger_rate The number of minutes to wait before sending an alert (default to 0)
    # @option opts [Boolean] :use_jar Whether to enable cookie storage (default to false)
    # @option opts [String] :user_agent Custom user agent string set when testing
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def create_uptime_test_with_http_info(name, test_type, website_url, check_rate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UptimeApi.create_uptime_test ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError, "Missing the required parameter 'name' when calling UptimeApi.create_uptime_test"
      end
      # verify the required parameter 'test_type' is set
      if @api_client.config.client_side_validation && test_type.nil?
        raise ArgumentError, "Missing the required parameter 'test_type' when calling UptimeApi.create_uptime_test"
      end
      # verify the required parameter 'website_url' is set
      if @api_client.config.client_side_validation && website_url.nil?
        raise ArgumentError, "Missing the required parameter 'website_url' when calling UptimeApi.create_uptime_test"
      end
      # verify the required parameter 'check_rate' is set
      if @api_client.config.client_side_validation && check_rate.nil?
        raise ArgumentError, "Missing the required parameter 'check_rate' when calling UptimeApi.create_uptime_test"
      end
      if @api_client.config.client_side_validation && !opts[:'confirmation'].nil? && opts[:'confirmation'] > 3
        raise ArgumentError, 'invalid value for "opts[:"confirmation"]" when calling UptimeApi.create_uptime_test, must be smaller than or equal to 3.'
      end

      if @api_client.config.client_side_validation && !opts[:'confirmation'].nil? && opts[:'confirmation'] < 0
        raise ArgumentError, 'invalid value for "opts[:"confirmation"]" when calling UptimeApi.create_uptime_test, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'port'].nil? && opts[:'port'] < 0
        raise ArgumentError, 'invalid value for "opts[:"port"]" when calling UptimeApi.create_uptime_test, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] > 75
        raise ArgumentError, 'invalid value for "opts[:"timeout"]" when calling UptimeApi.create_uptime_test, must be smaller than or equal to 75.'
      end

      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] < 5
        raise ArgumentError, 'invalid value for "opts[:"timeout"]" when calling UptimeApi.create_uptime_test, must be greater than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'trigger_rate'].nil? && opts[:'trigger_rate'] > 60
        raise ArgumentError, 'invalid value for "opts[:"trigger_rate"]" when calling UptimeApi.create_uptime_test, must be smaller than or equal to 60.'
      end

      if @api_client.config.client_side_validation && !opts[:'trigger_rate'].nil? && opts[:'trigger_rate'] < 0
        raise ArgumentError, 'invalid value for "opts[:"trigger_rate"]" when calling UptimeApi.create_uptime_test, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/uptime'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = name
      form_params['test_type'] = test_type
      form_params['website_url'] = website_url
      form_params['check_rate'] = check_rate
      form_params['basic_username'] = opts[:'basic_username'] unless opts[:'basic_username'].nil?
      form_params['basic_password'] = opts[:'basic_password'] unless opts[:'basic_password'].nil?
      form_params['confirmation'] = opts[:'confirmation'] unless opts[:'confirmation'].nil?
      form_params['contact_groups'] = @api_client.build_collection_param(opts[:'contact_groups'], :csv) unless opts[:'contact_groups'].nil?
      form_params['custom_header'] = opts[:'custom_header'] unless opts[:'custom_header'].nil?
      form_params['do_not_find'] = opts[:'do_not_find'] unless opts[:'do_not_find'].nil?
      form_params['dns_ips'] = @api_client.build_collection_param(opts[:'dns_ips'], :csv) unless opts[:'dns_ips'].nil?
      form_params['dns_server'] = opts[:'dns_server'] unless opts[:'dns_server'].nil?
      form_params['enable_ssl_alert'] = opts[:'enable_ssl_alert'] unless opts[:'enable_ssl_alert'].nil?
      form_params['final_endpoint'] = opts[:'final_endpoint'] unless opts[:'final_endpoint'].nil?
      form_params['find_string'] = opts[:'find_string'] unless opts[:'find_string'].nil?
      form_params['follow_redirects'] = opts[:'follow_redirects'] unless opts[:'follow_redirects'].nil?
      form_params['host'] = opts[:'host'] unless opts[:'host'].nil?
      form_params['include_header'] = opts[:'include_header'] unless opts[:'include_header'].nil?
      form_params['paused'] = opts[:'paused'] unless opts[:'paused'].nil?
      form_params['port'] = opts[:'port'] unless opts[:'port'].nil?
      form_params['post_body'] = opts[:'_post_body'] unless opts[:'_post_body'].nil?
      form_params['post_raw'] = opts[:'post_raw'] unless opts[:'post_raw'].nil?
      form_params['regions'] = @api_client.build_collection_param(opts[:'regions'], :csv) unless opts[:'regions'].nil?
      form_params['status_codes_csv'] = opts[:'status_codes_csv'] unless opts[:'status_codes_csv'].nil?
      form_params['tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) unless opts[:'tags'].nil?
      form_params['timeout'] = opts[:'timeout'] unless opts[:'timeout'].nil?
      form_params['trigger_rate'] = opts[:'trigger_rate'] unless opts[:'trigger_rate'].nil?
      form_params['use_jar'] = opts[:'use_jar'] unless opts[:'use_jar'].nil?
      form_params['user_agent'] = opts[:'user_agent'] unless opts[:'user_agent'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'UptimeApi.create_uptime_test',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UptimeApi#create_uptime_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Delete an uptime check
    # Deletes an uptime check with the given id.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_uptime_test(test_id, opts = {})
      delete_uptime_test_with_http_info(test_id, opts)
      nil
    end

    # Delete an uptime check
    # Deletes an uptime check with the given id.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_uptime_test_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UptimeApi.delete_uptime_test ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling UptimeApi.delete_uptime_test"
      end
      # resource path
      local_var_path = '/uptime/{test_id}'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'UptimeApi.delete_uptime_test',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UptimeApi#delete_uptime_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Retrieve an uptime check
    # Returns an uptime check with the given id.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @return [UptimeTestResponse]
    def get_uptime_test(test_id, opts = {})
      data, _status_code, _headers = get_uptime_test_with_http_info(test_id, opts)
      data
    end

    # Retrieve an uptime check
    # Returns an uptime check with the given id.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(UptimeTestResponse, Integer, Hash)>] UptimeTestResponse data, response status code and response headers
    def get_uptime_test_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UptimeApi.get_uptime_test ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling UptimeApi.get_uptime_test"
      end
      # resource path
      local_var_path = '/uptime/{test_id}'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UptimeTestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'UptimeApi.get_uptime_test',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UptimeApi#get_uptime_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Get all uptime check alerts
    # Returns a list of uptime check alerts for a given id.  The returned results are a paginated series. Alongside the response data is a `links` object referencing the current response document, `self`, and the next page in the series, `next`.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of uptime alerts to return per page (default to 25)
    # @option opts [Integer] :before Only alerts triggered before this UNIX timestamp will be returned
    # @return [UptimeTestAlerts]
    def list_uptime_test_alerts(test_id, opts = {})
      data, _status_code, _headers = list_uptime_test_alerts_with_http_info(test_id, opts)
      data
    end

    # Get all uptime check alerts
    # Returns a list of uptime check alerts for a given id.  The returned results are a paginated series. Alongside the response data is a `links` object referencing the current response document, `self`, and the next page in the series, `next`.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of uptime alerts to return per page (default to 25)
    # @option opts [Integer] :before Only alerts triggered before this UNIX timestamp will be returned
    # @return [Array<(UptimeTestAlerts, Integer, Hash)>] UptimeTestAlerts data, response status code and response headers
    def list_uptime_test_alerts_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UptimeApi.list_uptime_test_alerts ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling UptimeApi.list_uptime_test_alerts"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling UptimeApi.list_uptime_test_alerts, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling UptimeApi.list_uptime_test_alerts, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'before'].nil? && opts[:'before'] < 0
        raise ArgumentError, 'invalid value for "opts[:"before"]" when calling UptimeApi.list_uptime_test_alerts, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/uptime/{test_id}/alerts'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] unless opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] unless opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UptimeTestAlerts'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'UptimeApi.list_uptime_test_alerts',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UptimeApi#list_uptime_test_alerts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Get all uptime check history
    # Returns a list of uptime check history results for a given id, detailing the runs performed on the StatusCake testing infrastruture.  The returned results are a paginated series. Alongside the response data is a `links` object referencing the current response document, `self`, and the next page in the series, `next`.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results to return per page (default to 25)
    # @option opts [Integer] :before Only results created before this UNIX timestamp will be returned
    # @return [UptimeTestHistory]
    def list_uptime_test_history(test_id, opts = {})
      data, _status_code, _headers = list_uptime_test_history_with_http_info(test_id, opts)
      data
    end

    # Get all uptime check history
    # Returns a list of uptime check history results for a given id, detailing the runs performed on the StatusCake testing infrastruture.  The returned results are a paginated series. Alongside the response data is a `links` object referencing the current response document, `self`, and the next page in the series, `next`.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results to return per page (default to 25)
    # @option opts [Integer] :before Only results created before this UNIX timestamp will be returned
    # @return [Array<(UptimeTestHistory, Integer, Hash)>] UptimeTestHistory data, response status code and response headers
    def list_uptime_test_history_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UptimeApi.list_uptime_test_history ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling UptimeApi.list_uptime_test_history"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling UptimeApi.list_uptime_test_history, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling UptimeApi.list_uptime_test_history, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'before'].nil? && opts[:'before'] < 0
        raise ArgumentError, 'invalid value for "opts[:"before"]" when calling UptimeApi.list_uptime_test_history, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/uptime/{test_id}/history'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] unless opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] unless opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UptimeTestHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'UptimeApi.list_uptime_test_history',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UptimeApi#list_uptime_test_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Get all uptime check periods
    # Returns a list of uptime check periods for a given id, detailing the creation time of the period, when it ended and the duration.  The returned results are a paginated series. Alongside the response data is a `links` object referencing the current response document, `self`, and the next page in the series, `next`.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of uptime check periods to return per page (default to 25)
    # @option opts [Integer] :before Only check periods created before this UNIX timestamp will be returned
    # @return [UptimeTestPeriods]
    def list_uptime_test_periods(test_id, opts = {})
      data, _status_code, _headers = list_uptime_test_periods_with_http_info(test_id, opts)
      data
    end

    # Get all uptime check periods
    # Returns a list of uptime check periods for a given id, detailing the creation time of the period, when it ended and the duration.  The returned results are a paginated series. Alongside the response data is a `links` object referencing the current response document, `self`, and the next page in the series, `next`.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of uptime check periods to return per page (default to 25)
    # @option opts [Integer] :before Only check periods created before this UNIX timestamp will be returned
    # @return [Array<(UptimeTestPeriods, Integer, Hash)>] UptimeTestPeriods data, response status code and response headers
    def list_uptime_test_periods_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UptimeApi.list_uptime_test_periods ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling UptimeApi.list_uptime_test_periods"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling UptimeApi.list_uptime_test_periods, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling UptimeApi.list_uptime_test_periods, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'before'].nil? && opts[:'before'] < 0
        raise ArgumentError, 'invalid value for "opts[:"before"]" when calling UptimeApi.list_uptime_test_periods, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/uptime/{test_id}/periods'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] unless opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] unless opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UptimeTestPeriods'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'UptimeApi.list_uptime_test_periods',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UptimeApi#list_uptime_test_periods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Get all uptime checks
    # Returns a list of uptime checks for an account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Uptime check status
    # @option opts [Integer] :page Page of results (default to 1)
    # @option opts [Integer] :limit The number of uptime checks to return per page (default to 25)
    # @option opts [String] :tags Comma separated list of tags assocaited with a check
    # @option opts [Boolean] :matchany Include uptime checks in response that match any specified tag or all tags (default to false)
    # @option opts [Boolean] :nouptime Do not calculate uptime percentages for results (default to false)
    # @return [UptimeTests]
    def list_uptime_tests(opts = {})
      data, _status_code, _headers = list_uptime_tests_with_http_info(opts)
      data
    end

    # Get all uptime checks
    # Returns a list of uptime checks for an account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Uptime check status
    # @option opts [Integer] :page Page of results (default to 1)
    # @option opts [Integer] :limit The number of uptime checks to return per page (default to 25)
    # @option opts [String] :tags Comma separated list of tags assocaited with a check
    # @option opts [Boolean] :matchany Include uptime checks in response that match any specified tag or all tags (default to false)
    # @option opts [Boolean] :nouptime Do not calculate uptime percentages for results (default to false)
    # @return [Array<(UptimeTests, Integer, Hash)>] UptimeTests data, response status code and response headers
    def list_uptime_tests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UptimeApi.list_uptime_tests ...'
      end
      # rubocop:disable Style/WordArray
      allowable_values = ["down", "up"]
      # rubocop:enable Style/WordArray
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        raise ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        raise ArgumentError, 'invalid value for "opts[:"page"]" when calling UptimeApi.list_uptime_tests, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling UptimeApi.list_uptime_tests, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling UptimeApi.list_uptime_tests, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/uptime'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] unless opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] unless opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] unless opts[:'limit'].nil?
      query_params[:'tags'] = opts[:'tags'] unless opts[:'tags'].nil?
      query_params[:'matchany'] = opts[:'matchany'] unless opts[:'matchany'].nil?
      query_params[:'nouptime'] = opts[:'nouptime'] unless opts[:'nouptime'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UptimeTests'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'UptimeApi.list_uptime_tests',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UptimeApi#list_uptime_tests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Update an uptime check
    # Updates an uptime check with the given parameters.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the check
    # @option opts [UptimeTestCheckRate] :check_rate
    # @option opts [String] :basic_username Basic authentication username
    # @option opts [String] :basic_password Basic authentication password
    # @option opts [Integer] :confirmation Number of confirmation servers to confirm downtime before an alert is triggered
    # @option opts [Array<String>] :contact_groups List of contact group IDs
    # @option opts [String] :custom_header JSON object. Represents headers to be sent when making requests
    # @option opts [Boolean] :do_not_find Whether to consider the check as down if the content is present within the response
    # @option opts [Array<String>] :dns_ips List of IP addresses to compare against returned DNS records
    # @option opts [String] :dns_server FQDN or IP address of the nameserver to query
    # @option opts [Boolean] :enable_ssl_alert Whether to send an alert if the SSL certificate is soon to expire
    # @option opts [String] :final_endpoint Specify where the redirect chain should end
    # @option opts [String] :find_string String to look for within the response. Considered down if not found
    # @option opts [Boolean] :follow_redirects Whether to follow redirects when testing. Disabled by default
    # @option opts [String] :host Name of the hosting provider
    # @option opts [Boolean] :include_header Include header content in string match search
    # @option opts [Boolean] :paused Whether the check should be run
    # @option opts [Integer] :port Destination port for TCP checks
    # @option opts [String] :_post_body JSON object. Payload submitted with the request. Setting this updates the check to use the HTTP POST verb
    # @option opts [String] :post_raw Raw HTTP POST string to send to the server
    # @option opts [Array<String>] :regions List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET /v1/uptime-locations` endpoint.
    # @option opts [String] :status_codes_csv Comma separated list of status codes that trigger an alert
    # @option opts [Array<String>] :tags List of tags
    # @option opts [Integer] :timeout The number of seconds to wait to receive the first byte
    # @option opts [Integer] :trigger_rate The number of minutes to wait before sending an alert
    # @option opts [Boolean] :use_jar Whether to enable cookie storage
    # @option opts [String] :user_agent Custom user agent string set when testing
    # @return [nil]
    def update_uptime_test(test_id, opts = {})
      update_uptime_test_with_http_info(test_id, opts)
      nil
    end

    # Update an uptime check
    # Updates an uptime check with the given parameters.
    # @param test_id [String] Uptime check ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the check
    # @option opts [UptimeTestCheckRate] :check_rate
    # @option opts [String] :basic_username Basic authentication username
    # @option opts [String] :basic_password Basic authentication password
    # @option opts [Integer] :confirmation Number of confirmation servers to confirm downtime before an alert is triggered
    # @option opts [Array<String>] :contact_groups List of contact group IDs
    # @option opts [String] :custom_header JSON object. Represents headers to be sent when making requests
    # @option opts [Boolean] :do_not_find Whether to consider the check as down if the content is present within the response
    # @option opts [Array<String>] :dns_ips List of IP addresses to compare against returned DNS records
    # @option opts [String] :dns_server FQDN or IP address of the nameserver to query
    # @option opts [Boolean] :enable_ssl_alert Whether to send an alert if the SSL certificate is soon to expire
    # @option opts [String] :final_endpoint Specify where the redirect chain should end
    # @option opts [String] :find_string String to look for within the response. Considered down if not found
    # @option opts [Boolean] :follow_redirects Whether to follow redirects when testing. Disabled by default
    # @option opts [String] :host Name of the hosting provider
    # @option opts [Boolean] :include_header Include header content in string match search
    # @option opts [Boolean] :paused Whether the check should be run
    # @option opts [Integer] :port Destination port for TCP checks
    # @option opts [String] :_post_body JSON object. Payload submitted with the request. Setting this updates the check to use the HTTP POST verb
    # @option opts [String] :post_raw Raw HTTP POST string to send to the server
    # @option opts [Array<String>] :regions List of regions on which to run checks. The values required for this parameter can be retrieved from the `GET /v1/uptime-locations` endpoint.
    # @option opts [String] :status_codes_csv Comma separated list of status codes that trigger an alert
    # @option opts [Array<String>] :tags List of tags
    # @option opts [Integer] :timeout The number of seconds to wait to receive the first byte
    # @option opts [Integer] :trigger_rate The number of minutes to wait before sending an alert
    # @option opts [Boolean] :use_jar Whether to enable cookie storage
    # @option opts [String] :user_agent Custom user agent string set when testing
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_uptime_test_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UptimeApi.update_uptime_test ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling UptimeApi.update_uptime_test"
      end
      if @api_client.config.client_side_validation && !opts[:'confirmation'].nil? && opts[:'confirmation'] > 3
        raise ArgumentError, 'invalid value for "opts[:"confirmation"]" when calling UptimeApi.update_uptime_test, must be smaller than or equal to 3.'
      end

      if @api_client.config.client_side_validation && !opts[:'confirmation'].nil? && opts[:'confirmation'] < 0
        raise ArgumentError, 'invalid value for "opts[:"confirmation"]" when calling UptimeApi.update_uptime_test, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'port'].nil? && opts[:'port'] < 0
        raise ArgumentError, 'invalid value for "opts[:"port"]" when calling UptimeApi.update_uptime_test, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] > 75
        raise ArgumentError, 'invalid value for "opts[:"timeout"]" when calling UptimeApi.update_uptime_test, must be smaller than or equal to 75.'
      end

      if @api_client.config.client_side_validation && !opts[:'timeout'].nil? && opts[:'timeout'] < 5
        raise ArgumentError, 'invalid value for "opts[:"timeout"]" when calling UptimeApi.update_uptime_test, must be greater than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:'trigger_rate'].nil? && opts[:'trigger_rate'] > 60
        raise ArgumentError, 'invalid value for "opts[:"trigger_rate"]" when calling UptimeApi.update_uptime_test, must be smaller than or equal to 60.'
      end

      if @api_client.config.client_side_validation && !opts[:'trigger_rate'].nil? && opts[:'trigger_rate'] < 0
        raise ArgumentError, 'invalid value for "opts[:"trigger_rate"]" when calling UptimeApi.update_uptime_test, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/uptime/{test_id}'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = opts[:'name'] unless opts[:'name'].nil?
      form_params['check_rate'] = opts[:'check_rate'] unless opts[:'check_rate'].nil?
      form_params['basic_username'] = opts[:'basic_username'] unless opts[:'basic_username'].nil?
      form_params['basic_password'] = opts[:'basic_password'] unless opts[:'basic_password'].nil?
      form_params['confirmation'] = opts[:'confirmation'] unless opts[:'confirmation'].nil?
      form_params['contact_groups'] = @api_client.build_collection_param(opts[:'contact_groups'], :csv) unless opts[:'contact_groups'].nil?
      form_params['custom_header'] = opts[:'custom_header'] unless opts[:'custom_header'].nil?
      form_params['do_not_find'] = opts[:'do_not_find'] unless opts[:'do_not_find'].nil?
      form_params['dns_ips'] = @api_client.build_collection_param(opts[:'dns_ips'], :csv) unless opts[:'dns_ips'].nil?
      form_params['dns_server'] = opts[:'dns_server'] unless opts[:'dns_server'].nil?
      form_params['enable_ssl_alert'] = opts[:'enable_ssl_alert'] unless opts[:'enable_ssl_alert'].nil?
      form_params['final_endpoint'] = opts[:'final_endpoint'] unless opts[:'final_endpoint'].nil?
      form_params['find_string'] = opts[:'find_string'] unless opts[:'find_string'].nil?
      form_params['follow_redirects'] = opts[:'follow_redirects'] unless opts[:'follow_redirects'].nil?
      form_params['host'] = opts[:'host'] unless opts[:'host'].nil?
      form_params['include_header'] = opts[:'include_header'] unless opts[:'include_header'].nil?
      form_params['paused'] = opts[:'paused'] unless opts[:'paused'].nil?
      form_params['port'] = opts[:'port'] unless opts[:'port'].nil?
      form_params['post_body'] = opts[:'_post_body'] unless opts[:'_post_body'].nil?
      form_params['post_raw'] = opts[:'post_raw'] unless opts[:'post_raw'].nil?
      form_params['regions'] = @api_client.build_collection_param(opts[:'regions'], :csv) unless opts[:'regions'].nil?
      form_params['status_codes_csv'] = opts[:'status_codes_csv'] unless opts[:'status_codes_csv'].nil?
      form_params['tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) unless opts[:'tags'].nil?
      form_params['timeout'] = opts[:'timeout'] unless opts[:'timeout'].nil?
      form_params['trigger_rate'] = opts[:'trigger_rate'] unless opts[:'trigger_rate'].nil?
      form_params['use_jar'] = opts[:'use_jar'] unless opts[:'use_jar'].nil?
      form_params['user_agent'] = opts[:'user_agent'] unless opts[:'user_agent'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'UptimeApi.update_uptime_test',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UptimeApi#update_uptime_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end
  end
end
