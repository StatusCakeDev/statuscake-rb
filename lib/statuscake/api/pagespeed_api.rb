# frozen_string_literal: true

# StatusCake API
#
# Copyright (c) 2022
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# API version: 1.0.0
# Contact: support@statuscake.com
#
# Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

require 'cgi'

module StatusCake
  # :nodoc
  class PagespeedApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a pagespeed check
    # Creates a pagespeed check with the given parameters.
    # @param name [String] Name of the check
    # @param website_url [String] URL, FQDN, or IP address of the website under test
    # @param check_rate [PagespeedTestCheckRate]
    # @param region [PagespeedTestRegion]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :alert_bigger An alert will be sent if the size of the page is larger than this value (kb). A value of 0 prevents alerts being sent. (default to 0)
    # @option opts [Integer] :alert_slower An alert will be sent if the load time of the page exceeds this value (ms). A value of 0 prevents alerts being sent (default to 0)
    # @option opts [Integer] :alert_smaller An alert will be sent if the size of the page is smaller than this value (kb). A value of 0 prevents alerts being sent (default to 0)
    # @option opts [Array<String>] :contact_groups List of contact group IDs
    # @option opts [Boolean] :paused Whether the check should be run (default to false)
    # @return [APIResponse]
    def create_pagespeed_test(name, website_url, check_rate, region, opts = {})
      data, _status_code, _headers = create_pagespeed_test_with_http_info(name, website_url, check_rate, region, opts)
      data
    end

    # Create a pagespeed check
    # Creates a pagespeed check with the given parameters.
    # @param name [String] Name of the check
    # @param website_url [String] URL, FQDN, or IP address of the website under test
    # @param check_rate [PagespeedTestCheckRate]
    # @param region [PagespeedTestRegion]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :alert_bigger An alert will be sent if the size of the page is larger than this value (kb). A value of 0 prevents alerts being sent. (default to 0)
    # @option opts [Integer] :alert_slower An alert will be sent if the load time of the page exceeds this value (ms). A value of 0 prevents alerts being sent (default to 0)
    # @option opts [Integer] :alert_smaller An alert will be sent if the size of the page is smaller than this value (kb). A value of 0 prevents alerts being sent (default to 0)
    # @option opts [Array<String>] :contact_groups List of contact group IDs
    # @option opts [Boolean] :paused Whether the check should be run (default to false)
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def create_pagespeed_test_with_http_info(name, website_url, check_rate, region, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PagespeedApi.create_pagespeed_test ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError, "Missing the required parameter 'name' when calling PagespeedApi.create_pagespeed_test"
      end
      # verify the required parameter 'website_url' is set
      if @api_client.config.client_side_validation && website_url.nil?
        raise ArgumentError, "Missing the required parameter 'website_url' when calling PagespeedApi.create_pagespeed_test"
      end
      # verify the required parameter 'check_rate' is set
      if @api_client.config.client_side_validation && check_rate.nil?
        raise ArgumentError, "Missing the required parameter 'check_rate' when calling PagespeedApi.create_pagespeed_test"
      end
      # verify the required parameter 'region' is set
      if @api_client.config.client_side_validation && region.nil?
        raise ArgumentError, "Missing the required parameter 'region' when calling PagespeedApi.create_pagespeed_test"
      end
      if @api_client.config.client_side_validation && !opts[:'alert_bigger'].nil? && opts[:'alert_bigger'] < 0
        raise ArgumentError, 'invalid value for "opts[:"alert_bigger"]" when calling PagespeedApi.create_pagespeed_test, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'alert_slower'].nil? && opts[:'alert_slower'] < 0
        raise ArgumentError, 'invalid value for "opts[:"alert_slower"]" when calling PagespeedApi.create_pagespeed_test, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'alert_smaller'].nil? && opts[:'alert_smaller'] < 0
        raise ArgumentError, 'invalid value for "opts[:"alert_smaller"]" when calling PagespeedApi.create_pagespeed_test, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/pagespeed'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = name
      form_params['website_url'] = website_url
      form_params['check_rate'] = check_rate
      form_params['region'] = region
      form_params['alert_bigger'] = opts[:'alert_bigger'] unless opts[:'alert_bigger'].nil?
      form_params['alert_slower'] = opts[:'alert_slower'] unless opts[:'alert_slower'].nil?
      form_params['alert_smaller'] = opts[:'alert_smaller'] unless opts[:'alert_smaller'].nil?
      form_params['contact_groups'] = @api_client.build_collection_param(opts[:'contact_groups'], :csv) unless opts[:'contact_groups'].nil?
      form_params['paused'] = opts[:'paused'] unless opts[:'paused'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'PagespeedApi.create_pagespeed_test',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PagespeedApi#create_pagespeed_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Delete a pagespeed check
    # Deletes a pagespeed check with the given id.
    # @param test_id [String] Pagespeed check ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pagespeed_test(test_id, opts = {})
      delete_pagespeed_test_with_http_info(test_id, opts)
      nil
    end

    # Delete a pagespeed check
    # Deletes a pagespeed check with the given id.
    # @param test_id [String] Pagespeed check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pagespeed_test_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PagespeedApi.delete_pagespeed_test ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling PagespeedApi.delete_pagespeed_test"
      end
      # resource path
      local_var_path = '/pagespeed/{test_id}'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'PagespeedApi.delete_pagespeed_test',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PagespeedApi#delete_pagespeed_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Retrieve a pagespeed check
    # Returns a pagespeed check with the given id.
    # @param test_id [String] Pagespeed check ID
    # @param [Hash] opts the optional parameters
    # @return [PagespeedTestResponse]
    def get_pagespeed_test(test_id, opts = {})
      data, _status_code, _headers = get_pagespeed_test_with_http_info(test_id, opts)
      data
    end

    # Retrieve a pagespeed check
    # Returns a pagespeed check with the given id.
    # @param test_id [String] Pagespeed check ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(PagespeedTestResponse, Integer, Hash)>] PagespeedTestResponse data, response status code and response headers
    def get_pagespeed_test_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PagespeedApi.get_pagespeed_test ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling PagespeedApi.get_pagespeed_test"
      end
      # resource path
      local_var_path = '/pagespeed/{test_id}'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagespeedTestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'PagespeedApi.get_pagespeed_test',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PagespeedApi#get_pagespeed_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Get all pagespeed check history
    # Returns a list of pagespeed check history results for a given id, detailing the runs performed on the StatusCake testing infrastruture.  The returned results are a paginated series. Alongside the response data is a `links` object referencing the current response document, `self`, and the next page in the series, `next`.  Aggregated data over the specified duration is returned in the root level `metadata` field.
    # @param test_id [String] Pagespeed check ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results to return from the series (default to 25)
    # @option opts [Integer] :before Only results created before this UNIX timestamp will be returned
    # @return [PagespeedTestHistory]
    def list_pagespeed_test_history(test_id, opts = {})
      data, _status_code, _headers = list_pagespeed_test_history_with_http_info(test_id, opts)
      data
    end

    # Get all pagespeed check history
    # Returns a list of pagespeed check history results for a given id, detailing the runs performed on the StatusCake testing infrastruture.  The returned results are a paginated series. Alongside the response data is a `links` object referencing the current response document, `self`, and the next page in the series, `next`.  Aggregated data over the specified duration is returned in the root level `metadata` field.
    # @param test_id [String] Pagespeed check ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of results to return from the series (default to 25)
    # @option opts [Integer] :before Only results created before this UNIX timestamp will be returned
    # @return [Array<(PagespeedTestHistory, Integer, Hash)>] PagespeedTestHistory data, response status code and response headers
    def list_pagespeed_test_history_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PagespeedApi.list_pagespeed_test_history ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling PagespeedApi.list_pagespeed_test_history"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling PagespeedApi.list_pagespeed_test_history, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling PagespeedApi.list_pagespeed_test_history, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'before'].nil? && opts[:'before'] < 0
        raise ArgumentError, 'invalid value for "opts[:"before"]" when calling PagespeedApi.list_pagespeed_test_history, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/pagespeed/{test_id}/history'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] unless opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] unless opts[:'before'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagespeedTestHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'PagespeedApi.list_pagespeed_test_history',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PagespeedApi#list_pagespeed_test_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Get all pagespeed checks
    # Returns a list of pagespeed checks for an account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results (default to 1)
    # @option opts [Integer] :limit The number of pagespeed checks to return per page (default to 25)
    # @return [PagespeedTests]
    def list_pagespeed_tests(opts = {})
      data, _status_code, _headers = list_pagespeed_tests_with_http_info(opts)
      data
    end

    # Get all pagespeed checks
    # Returns a list of pagespeed checks for an account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results (default to 1)
    # @option opts [Integer] :limit The number of pagespeed checks to return per page (default to 25)
    # @return [Array<(PagespeedTests, Integer, Hash)>] PagespeedTests data, response status code and response headers
    def list_pagespeed_tests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PagespeedApi.list_pagespeed_tests ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        raise ArgumentError, 'invalid value for "opts[:"page"]" when calling PagespeedApi.list_pagespeed_tests, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling PagespeedApi.list_pagespeed_tests, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling PagespeedApi.list_pagespeed_tests, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/pagespeed'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] unless opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] unless opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PagespeedTests'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'PagespeedApi.list_pagespeed_tests',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PagespeedApi#list_pagespeed_tests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Update a pagespeed check
    # Updates a pagespeed check with the given parameters.
    # @param test_id [String] Pagespeed check ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the check
    # @option opts [PagespeedTestCheckRate] :check_rate
    # @option opts [Integer] :alert_bigger An alert will be sent if the size of the page is larger than this value (kb). A value of 0 prevents alerts being sent.
    # @option opts [Integer] :alert_slower An alert will be sent if the load time of the page exceeds this value (ms). A value of 0 prevents alerts being sent
    # @option opts [Integer] :alert_smaller An alert will be sent if the size of the page is smaller than this value (kb). A value of 0 prevents alerts being sent
    # @option opts [Array<String>] :contact_groups List of contact group IDs
    # @option opts [Boolean] :paused Whether the check should be run
    # @option opts [PagespeedTestRegion] :region
    # @return [nil]
    def update_pagespeed_test(test_id, opts = {})
      update_pagespeed_test_with_http_info(test_id, opts)
      nil
    end

    # Update a pagespeed check
    # Updates a pagespeed check with the given parameters.
    # @param test_id [String] Pagespeed check ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the check
    # @option opts [PagespeedTestCheckRate] :check_rate
    # @option opts [Integer] :alert_bigger An alert will be sent if the size of the page is larger than this value (kb). A value of 0 prevents alerts being sent.
    # @option opts [Integer] :alert_slower An alert will be sent if the load time of the page exceeds this value (ms). A value of 0 prevents alerts being sent
    # @option opts [Integer] :alert_smaller An alert will be sent if the size of the page is smaller than this value (kb). A value of 0 prevents alerts being sent
    # @option opts [Array<String>] :contact_groups List of contact group IDs
    # @option opts [Boolean] :paused Whether the check should be run
    # @option opts [PagespeedTestRegion] :region
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_pagespeed_test_with_http_info(test_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PagespeedApi.update_pagespeed_test ...'
      end
      # verify the required parameter 'test_id' is set
      if @api_client.config.client_side_validation && test_id.nil?
        raise ArgumentError, "Missing the required parameter 'test_id' when calling PagespeedApi.update_pagespeed_test"
      end
      if @api_client.config.client_side_validation && !opts[:'alert_bigger'].nil? && opts[:'alert_bigger'] < 0
        raise ArgumentError, 'invalid value for "opts[:"alert_bigger"]" when calling PagespeedApi.update_pagespeed_test, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'alert_slower'].nil? && opts[:'alert_slower'] < 0
        raise ArgumentError, 'invalid value for "opts[:"alert_slower"]" when calling PagespeedApi.update_pagespeed_test, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'alert_smaller'].nil? && opts[:'alert_smaller'] < 0
        raise ArgumentError, 'invalid value for "opts[:"alert_smaller"]" when calling PagespeedApi.update_pagespeed_test, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/pagespeed/{test_id}'.sub('{' + 'test_id' + '}', CGI.escape(test_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = opts[:'name'] unless opts[:'name'].nil?
      form_params['check_rate'] = opts[:'check_rate'] unless opts[:'check_rate'].nil?
      form_params['alert_bigger'] = opts[:'alert_bigger'] unless opts[:'alert_bigger'].nil?
      form_params['alert_slower'] = opts[:'alert_slower'] unless opts[:'alert_slower'].nil?
      form_params['alert_smaller'] = opts[:'alert_smaller'] unless opts[:'alert_smaller'].nil?
      form_params['contact_groups'] = @api_client.build_collection_param(opts[:'contact_groups'], :csv) unless opts[:'contact_groups'].nil?
      form_params['paused'] = opts[:'paused'] unless opts[:'paused'].nil?
      form_params['region'] = opts[:'region'] unless opts[:'region'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'PagespeedApi.update_pagespeed_test',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PagespeedApi#update_pagespeed_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end
  end
end
