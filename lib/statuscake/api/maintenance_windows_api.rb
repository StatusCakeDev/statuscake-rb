# frozen_string_literal: true

# StatusCake API
#
# Copyright (c) 2022
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# API version: 1.0.0
# Contact: support@statuscake.com
#
# Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

require 'cgi'

module StatusCake
  # :nodoc
  class MaintenanceWindowsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a maintenance window
    # Creates a maintenance window with the given parameters.
    # @param name [String] Name of the maintenance window
    # @param end_at [Time] End of the maintenance window (RFC3339 format)
    # @param start_at [Time] Start of the maintenance window (RFC3339 format)
    # @param timezone [String] Standard [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) associated with this maintenance window
    # @param [Hash] opts the optional parameters
    # @option opts [MaintenanceWindowRepeatInterval] :repeat_interval
    # @option opts [Array<String>] :tags List of tags used to include matching uptime checks in this maintenance window. At least one of `tests` and `tags` must be present in the request
    # @option opts [Array<String>] :tests List of uptime check IDs explicitly included in this maintenance window. At least one of `tests` and `tags` must be present in the request
    # @return [APIResponse]
    def create_maintenance_window(name, end_at, start_at, timezone, opts = {})
      data, _status_code, _headers = create_maintenance_window_with_http_info(name, end_at, start_at, timezone, opts)
      data
    end

    # Create a maintenance window
    # Creates a maintenance window with the given parameters.
    # @param name [String] Name of the maintenance window
    # @param end_at [Time] End of the maintenance window (RFC3339 format)
    # @param start_at [Time] Start of the maintenance window (RFC3339 format)
    # @param timezone [String] Standard [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) associated with this maintenance window
    # @param [Hash] opts the optional parameters
    # @option opts [MaintenanceWindowRepeatInterval] :repeat_interval
    # @option opts [Array<String>] :tags List of tags used to include matching uptime checks in this maintenance window. At least one of `tests` and `tags` must be present in the request
    # @option opts [Array<String>] :tests List of uptime check IDs explicitly included in this maintenance window. At least one of `tests` and `tags` must be present in the request
    # @return [Array<(APIResponse, Integer, Hash)>] APIResponse data, response status code and response headers
    def create_maintenance_window_with_http_info(name, end_at, start_at, timezone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MaintenanceWindowsApi.create_maintenance_window ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError, "Missing the required parameter 'name' when calling MaintenanceWindowsApi.create_maintenance_window"
      end
      # verify the required parameter 'end_at' is set
      if @api_client.config.client_side_validation && end_at.nil?
        raise ArgumentError, "Missing the required parameter 'end_at' when calling MaintenanceWindowsApi.create_maintenance_window"
      end
      # verify the required parameter 'start_at' is set
      if @api_client.config.client_side_validation && start_at.nil?
        raise ArgumentError, "Missing the required parameter 'start_at' when calling MaintenanceWindowsApi.create_maintenance_window"
      end
      # verify the required parameter 'timezone' is set
      if @api_client.config.client_side_validation && timezone.nil?
        raise ArgumentError, "Missing the required parameter 'timezone' when calling MaintenanceWindowsApi.create_maintenance_window"
      end
      # resource path
      local_var_path = '/maintenance-windows'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = name
      form_params['end_at'] = end_at
      form_params['start_at'] = start_at
      form_params['timezone'] = timezone
      form_params['repeat_interval'] = opts[:'repeat_interval'] unless opts[:'repeat_interval'].nil?
      form_params['tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) unless opts[:'tags'].nil?
      form_params['tests'] = @api_client.build_collection_param(opts[:'tests'], :csv) unless opts[:'tests'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'MaintenanceWindowsApi.create_maintenance_window',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MaintenanceWindowsApi#create_maintenance_window\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Delete a maintenance window
    # Deletes a maintenance window with the given id.
    # @param window_id [String] Maintenance window ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_maintenance_window(window_id, opts = {})
      delete_maintenance_window_with_http_info(window_id, opts)
      nil
    end

    # Delete a maintenance window
    # Deletes a maintenance window with the given id.
    # @param window_id [String] Maintenance window ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_maintenance_window_with_http_info(window_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MaintenanceWindowsApi.delete_maintenance_window ...'
      end
      # verify the required parameter 'window_id' is set
      if @api_client.config.client_side_validation && window_id.nil?
        raise ArgumentError, "Missing the required parameter 'window_id' when calling MaintenanceWindowsApi.delete_maintenance_window"
      end
      # resource path
      local_var_path = '/maintenance-windows/{window_id}'.sub('{' + 'window_id' + '}', CGI.escape(window_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'MaintenanceWindowsApi.delete_maintenance_window',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MaintenanceWindowsApi#delete_maintenance_window\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Retrieve a maintenance window
    # Returns a maintenance window with the given id.
    # @param window_id [String] Maintenance window ID
    # @param [Hash] opts the optional parameters
    # @return [MaintenanceWindowResponse]
    def get_maintenance_window(window_id, opts = {})
      data, _status_code, _headers = get_maintenance_window_with_http_info(window_id, opts)
      data
    end

    # Retrieve a maintenance window
    # Returns a maintenance window with the given id.
    # @param window_id [String] Maintenance window ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(MaintenanceWindowResponse, Integer, Hash)>] MaintenanceWindowResponse data, response status code and response headers
    def get_maintenance_window_with_http_info(window_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MaintenanceWindowsApi.get_maintenance_window ...'
      end
      # verify the required parameter 'window_id' is set
      if @api_client.config.client_side_validation && window_id.nil?
        raise ArgumentError, "Missing the required parameter 'window_id' when calling MaintenanceWindowsApi.get_maintenance_window"
      end
      # resource path
      local_var_path = '/maintenance-windows/{window_id}'.sub('{' + 'window_id' + '}', CGI.escape(window_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MaintenanceWindowResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'MaintenanceWindowsApi.get_maintenance_window',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MaintenanceWindowsApi#get_maintenance_window\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Get all maintenance windows
    # Returns a list of maintenance windows for an account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results (default to 1)
    # @option opts [Integer] :limit The number of maintenance windows to return per page (default to 25)
    # @option opts [String] :state Maintenance window state
    # @return [MaintenanceWindows]
    def list_maintenance_windows(opts = {})
      data, _status_code, _headers = list_maintenance_windows_with_http_info(opts)
      data
    end

    # Get all maintenance windows
    # Returns a list of maintenance windows for an account.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results (default to 1)
    # @option opts [Integer] :limit The number of maintenance windows to return per page (default to 25)
    # @option opts [String] :state Maintenance window state
    # @return [Array<(MaintenanceWindows, Integer, Hash)>] MaintenanceWindows data, response status code and response headers
    def list_maintenance_windows_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MaintenanceWindowsApi.list_maintenance_windows ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        raise ArgumentError, 'invalid value for "opts[:"page"]" when calling MaintenanceWindowsApi.list_maintenance_windows, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling MaintenanceWindowsApi.list_maintenance_windows, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        raise ArgumentError, 'invalid value for "opts[:"limit"]" when calling MaintenanceWindowsApi.list_maintenance_windows, must be greater than or equal to 1.'
      end

      # rubocop:disable Style/WordArray
      allowable_values = ["active", "paused", "pending"]
      # rubocop:enable Style/WordArray
      if @api_client.config.client_side_validation && opts[:'state'] && !allowable_values.include?(opts[:'state'])
        raise ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/maintenance-windows'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] unless opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] unless opts[:'limit'].nil?
      query_params[:'state'] = opts[:'state'] unless opts[:'state'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MaintenanceWindows'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'MaintenanceWindowsApi.list_maintenance_windows',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MaintenanceWindowsApi#list_maintenance_windows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end

    # Update a maintenance window
    # Updates a maintenance window with the given parameters.
    # @param window_id [String] Maintenance window ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the maintenance window
    # @option opts [Time] :end_at End of the maintenance window (RFC3339 format)
    # @option opts [MaintenanceWindowRepeatInterval] :repeat_interval
    # @option opts [Time] :start_at Start of the maintenance window (RFC3339 format)
    # @option opts [Array<String>] :tags List of tags used to include matching uptime checks in this maintenance window
    # @option opts [Array<String>] :tests List of uptime check IDs explicitly included in this maintenance window
    # @option opts [String] :timezone Standard [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) associated with this maintenance window
    # @return [nil]
    def update_maintenance_window(window_id, opts = {})
      update_maintenance_window_with_http_info(window_id, opts)
      nil
    end

    # Update a maintenance window
    # Updates a maintenance window with the given parameters.
    # @param window_id [String] Maintenance window ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of the maintenance window
    # @option opts [Time] :end_at End of the maintenance window (RFC3339 format)
    # @option opts [MaintenanceWindowRepeatInterval] :repeat_interval
    # @option opts [Time] :start_at Start of the maintenance window (RFC3339 format)
    # @option opts [Array<String>] :tags List of tags used to include matching uptime checks in this maintenance window
    # @option opts [Array<String>] :tests List of uptime check IDs explicitly included in this maintenance window
    # @option opts [String] :timezone Standard [timezone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List) associated with this maintenance window
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_maintenance_window_with_http_info(window_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MaintenanceWindowsApi.update_maintenance_window ...'
      end
      # verify the required parameter 'window_id' is set
      if @api_client.config.client_side_validation && window_id.nil?
        raise ArgumentError, "Missing the required parameter 'window_id' when calling MaintenanceWindowsApi.update_maintenance_window"
      end
      # resource path
      local_var_path = '/maintenance-windows/{window_id}'.sub('{' + 'window_id' + '}', CGI.escape(window_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      unless content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = opts[:'name'] unless opts[:'name'].nil?
      form_params['end_at'] = opts[:'end_at'] unless opts[:'end_at'].nil?
      form_params['repeat_interval'] = opts[:'repeat_interval'] unless opts[:'repeat_interval'].nil?
      form_params['start_at'] = opts[:'start_at'] unless opts[:'start_at'].nil?
      form_params['tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) unless opts[:'tags'].nil?
      form_params['tests'] = @api_client.build_collection_param(opts[:'tests'], :csv) unless opts[:'tests'].nil?
      form_params['timezone'] = opts[:'timezone'] unless opts[:'timezone'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :'MaintenanceWindowsApi.update_maintenance_window',
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type,
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MaintenanceWindowsApi#update_maintenance_window\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end

      [data, status_code, headers]
    end
  end
end
