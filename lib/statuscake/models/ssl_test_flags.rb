# frozen_string_literal: true

# StatusCake API
#
# Copyright (c) 2023
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
#
# API version: 1.1.0
# Contact: support@statuscake.com
#
# Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

require 'date'
require 'time'

module StatusCake
  # :nodoc
  class SSLTestFlags
    # Wherher follow redirects has been enabled for the SSL check
    attr_accessor :follow_redirects

    # Whether the requested page has mixed content
    attr_accessor :has_mixed

    # Whether the SSL certificate has Perfect Forward Security enabled
    attr_accessor :has_pfs

    # Whether the SSL certificate has errors
    attr_accessor :is_broken

    # Whether the SSL certificate has expired
    attr_accessor :is_expired

    # Whether the SSL certificate has Extended Validation (EV)
    attr_accessor :is_extended

    # Whether the SSL certificate is missing
    attr_accessor :is_missing

    # Whether the SSL certificate has been revoked by the certificate authority
    attr_accessor :is_revoked

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'follow_redirects' => :'follow_redirects',
        :'has_mixed' => :'has_mixed',
        :'has_pfs' => :'has_pfs',
        :'is_broken' => :'is_broken',
        :'is_expired' => :'is_expired',
        :'is_extended' => :'is_extended',
        :'is_missing' => :'is_missing',
        :'is_revoked' => :'is_revoked',
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'follow_redirects' => :'Boolean',
        :'has_mixed' => :'Boolean',
        :'has_pfs' => :'Boolean',
        :'is_broken' => :'Boolean',
        :'is_expired' => :'Boolean',
        :'is_extended' => :'Boolean',
        :'is_missing' => :'Boolean',
        :'is_revoked' => :'Boolean',
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError, "The input argument (attributes) must be a hash in `StatusCake::SSLTestFlags` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError, "`#{k}` is not a valid attribute in `StatusCake::SSLTestFlags`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'follow_redirects')
        self.follow_redirects = attributes[:'follow_redirects']
      end

      if attributes.key?(:'has_mixed')
        self.has_mixed = attributes[:'has_mixed']
      end

      if attributes.key?(:'has_pfs')
        self.has_pfs = attributes[:'has_pfs']
      end

      if attributes.key?(:'is_broken')
        self.is_broken = attributes[:'is_broken']
      end

      if attributes.key?(:'is_expired')
        self.is_expired = attributes[:'is_expired']
      end

      if attributes.key?(:'is_extended')
        self.is_extended = attributes[:'is_extended']
      end

      if attributes.key?(:'is_missing')
        self.is_missing = attributes[:'is_missing']
      end

      if attributes.key?(:'is_revoked')
        self.is_revoked = attributes[:'is_revoked']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      if @follow_redirects.nil?
        invalid_properties.push('invalid value for "follow_redirects", follow_redirects cannot be nil.')
      end

      if @has_mixed.nil?
        invalid_properties.push('invalid value for "has_mixed", has_mixed cannot be nil.')
      end

      if @has_pfs.nil?
        invalid_properties.push('invalid value for "has_pfs", has_pfs cannot be nil.')
      end

      if @is_broken.nil?
        invalid_properties.push('invalid value for "is_broken", is_broken cannot be nil.')
      end

      if @is_expired.nil?
        invalid_properties.push('invalid value for "is_expired", is_expired cannot be nil.')
      end

      if @is_extended.nil?
        invalid_properties.push('invalid value for "is_extended", is_extended cannot be nil.')
      end

      if @is_missing.nil?
        invalid_properties.push('invalid value for "is_missing", is_missing cannot be nil.')
      end

      if @is_revoked.nil?
        invalid_properties.push('invalid value for "is_revoked", is_revoked cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @follow_redirects.nil?
      return false if @has_mixed.nil?
      return false if @has_pfs.nil?
      return false if @is_broken.nil?
      return false if @is_expired.nil?
      return false if @is_extended.nil?
      return false if @is_missing.nil?
      return false if @is_revoked.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)
      self.class == other.class &&
        follow_redirects == other.follow_redirects &&
        has_mixed == other.has_mixed &&
        has_pfs == other.has_pfs &&
        is_broken == other.is_broken &&
        is_expired == other.is_expired &&
        is_extended == other.is_extended &&
        is_missing == other.is_missing &&
        is_revoked == other.is_revoked
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [follow_redirects, has_mixed, has_pfs, is_broken, is_expired, is_extended, is_missing, is_revoked].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(Regexp.last_match(1), v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = StatusCake.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
